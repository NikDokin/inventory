name: Build and Deploy Docker Image to Kubernetes

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.tag.outputs.docker_tag }}
      env_file: ${{ steps.tag.outputs.env_file }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Determine Docker Image Tag
        id: tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          if [[ "$GITHUB_REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
            echo "env_file=prod.env" >> $GITHUB_OUTPUT 
          else
            SHORT_SHA=$(git rev-parse --short HEAD)
            TAG="develop-${SHORT_SHA}"
            echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
            echo "env_file=dev.env" >> $GITHUB_OUTPUT  
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: shifter1703/fungicibus:${{ steps.tag.outputs.docker_tag }}

  deploy:
    needs: build-and-push
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Environment File
        run: |
          echo "ENV_FILE=${{ needs.build-and-push.outputs.env_file }}" >> $GITHUB_ENV
          echo "Using environment file: ${{ needs.build-and-push.outputs.env_file }}"

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.28.0'

      - name: Configure kubectl context
        run: |
          # Сохраняем содержимое секрета KUBE_CONFIG в файл kubeconfig
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          
          # Устанавливаем переменную окружения KUBECONFIG с абсолютным путем
          export KUBECONFIG=$(pwd)/kubeconfig
          
          # Проверяем содержимое конфигурации
          kubectl config view --raw
          
          # Список всех доступных контекстов
          kubectl config get-contexts
          
          # Переключаемся на правильный контекст
          kubectl config use-context kubernetes-admin@kubernetes
          
          # Проверка состояния
          kubectl cluster-info
          kubectl get nodes

      - name: Create ConfigMap from prod.env
        run: |
         kubectl create configmap prod-env --from-env-file=prod.env --dry-run=client -o yaml | kubectl apply -f -


      - name: Update Kubernetes Deployment
        run: |
          # Убедитесь, что контекст переключен
          export KUBECONFIG=$(pwd)/kubeconfig  # Убедитесь, что KUBECONFIG указан в каждом шаге
      
          kubectl config use-context kubernetes-admin@kubernetes
          
          # Обновление образа деплоймента
          echo "Updating Kubernetes deployment with image: shifter1703/fungicibus:${{ needs.build-and-push.outputs.docker_tag }}"
          kubectl set image deployment/myapp myapp=shifter1703/fungicibus:${{ needs.build-and-push.outputs.docker_tag }}
          
          # Ожидание завершения развертывания
          kubectl rollout status deployment/myapp

      - name: Apply Kubernetes changes (if needed)
        run: |
          # Создаем ConfigMap из prod.env, который находится в репозитории
          kubectl create configmap prod-env --from-env-file=prod.env --dry-run=client -o yaml | kubectl apply -f -
          
          # Подставляем переменную DOCKER_TAG в файл deployment.yaml
          echo "DOCKER_TAG=${{ needs.build-and-push.outputs.docker_tag }}" >> $GITHUB_ENV
          
          # Применение деплоймента с подставленной переменной
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml

      - name: Get Kubernetes pod status
        run: |
          kubectl get pods

      - name: Get Kubernetes service status
        run: |
          kubectl get svc